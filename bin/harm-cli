#!/usr/bin/env bash
# shellcheck shell=bash
# harm-cli - Personal CLI toolkit for development
# Version: 0.1.0-alpha
#
# Usage: harm-cli [OPTIONS] COMMAND [ARGS...]

set -Eeuo pipefail
IFS=$'\n\t'

# ═══════════════════════════════════════════════════════════════
# Configuration & Globals
# ═══════════════════════════════════════════════════════════════

SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd -P)"
readonly SCRIPT_DIR
ROOT_DIR="$(cd -- "$SCRIPT_DIR/.." && pwd -P)"
readonly ROOT_DIR
VERSION="$(cat "$ROOT_DIR/VERSION" 2>/dev/null || echo "unknown")"
readonly VERSION

# Load common utilities
# shellcheck source=lib/common.sh
if [[ -f "$ROOT_DIR/lib/common.sh" ]]; then
  source "$ROOT_DIR/lib/common.sh"
else
  # Minimal fallback if common.sh doesn't exist yet
  die() {
    echo "ERROR: $*" >&2
    exit "${2:-1}"
  }
  log() { echo "$@" >&2; }
fi

# ═══════════════════════════════════════════════════════════════
# Command Dispatch
# ═══════════════════════════════════════════════════════════════

cmd_version() {
  local format="${1:-text}"
  case "$format" in
    json)
      jq -n \
        --arg version "$VERSION" \
        --arg shell "$BASH_VERSION" \
        '{version: $version, shell: "bash", shell_version: $shell}'
      ;;
    *)
      echo "harm-cli version $VERSION"
      echo "Shell: bash $BASH_VERSION"
      ;;
  esac
}

cmd_help() {
  cat <<'EOF'
harm-cli - Personal CLI toolkit for development

Usage:
  harm-cli [OPTIONS] COMMAND [ARGS...]

Options:
  -h, --help              Show this help message
  -v, --version           Show version information
  -F, --format FORMAT     Output format (text|json) [default: text]
  -q, --quiet             Suppress non-error output
  -d, --debug             Enable debug output

Commands:
  version                 Show version information
  help                    Show this help message
  doctor                  Check system dependencies and health
  init                    Initialize harm-cli in current shell

  work                    Work session management
  goal                    Goal tracking and progress
  ai                      AI assistant commands (Gemini)
  git                     Enhanced git workflows with AI
  proj                    Project management and switching
  docker                  Docker and Docker Compose management
  python                  Python development environment
  gcloud                  Google Cloud SDK integration
  health                  System and project health checks

Run 'harm-cli COMMAND --help' for more information on a command.

Environment Variables:
  HARM_CLI_HOME          Override config directory (default: ~/.harm-cli)
  HARM_CLI_LOG_LEVEL     Log level: DEBUG|INFO|WARN|ERROR (default: INFO)
  HARM_CLI_FORMAT        Default output format: text|json (default: text)

Examples:
  harm-cli version --format json
  harm-cli work start "Phase 3"
  harm-cli goal set "Complete refactoring" 4h
  harm-cli ai "How do I list files recursively?"
  harm-cli ai --setup

For more information, visit: https://github.com/HarmAalbers/harm-cli
EOF
}

cmd_doctor() {
  log "🏥 Checking system health..."
  echo ""

  # Check shell
  echo "Shell Environment:"
  echo "  ✅ Bash version: $BASH_VERSION"

  # Check required dependencies
  echo ""
  echo "Required Dependencies:"
  local deps=(bash jq git)
  local missing=0

  for dep in "${deps[@]}"; do
    if command -v "$dep" >/dev/null 2>&1; then
      echo "  ✅ $dep"
    else
      echo "  ❌ $dep (missing)"
      ((missing++))
    fi
  done

  # Check optional dependencies
  echo ""
  echo "Optional Dependencies:"
  local opt_deps=(zsh curl docker python3)

  for dep in "${opt_deps[@]}"; do
    if command -v "$dep" >/dev/null 2>&1; then
      echo "  ✅ $dep"
    else
      echo "  ⚠️  $dep (optional)"
    fi
  done

  echo ""
  if ((missing > 0)); then
    die "$missing required dependencies missing" 1
  else
    echo "✅ All required dependencies installed"
  fi
}

cmd_init() {
  cat <<'EOF'
# harm-cli shell integration

To enable harm-cli in your shell, add this to your ~/.bashrc or ~/.zshrc:

  # Load harm-cli
  eval "$(harm-cli init)"

Or source the initialization script directly:

  # Bash
  source /path/to/harm-cli/etc/harm-cli.bash

  # Zsh
  source /path/to/harm-cli/etc/harm-cli.zsh

This will:
  - Add harm-cli to your PATH
  - Enable command completions
  - Set up helpful aliases
  - Initialize work session tracking
EOF
}

# ═══════════════════════════════════════════════════════════════
# Argument Parsing
# ═══════════════════════════════════════════════════════════════

main() {
  local format="text"
  local quiet=0
  local debug=0

  # Parse global options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        cmd_help
        exit 0
        ;;
      -v | --version)
        cmd_version "$format"
        exit 0
        ;;
      -F | --format)
        format="${2:?--format requires an argument}"
        shift 2
        ;;
      -q | --quiet)
        quiet=1
        shift
        ;;
      -d | --debug)
        debug=1
        set -x
        shift
        ;;
      -*)
        die "Unknown option: $1" 2
        ;;
      *)
        break
        ;;
    esac
  done

  # Export format for subcommands
  export HARM_CLI_FORMAT="$format"
  export HARM_CLI_QUIET="$quiet"
  export HARM_CLI_DEBUG="$debug"

  # Dispatch to command
  local cmd="${1:-help}"
  shift || true

  case "$cmd" in
    version)
      # Parse format: support both --format FLAG and positional arg
      local cmd_format="$format"
      if [[ "${1:-}" == "--format" || "${1:-}" == "-F" ]]; then
        cmd_format="${2:?--format requires an argument}"
      elif [[ -n "${1:-}" ]]; then
        cmd_format="$1"
      fi
      cmd_version "$cmd_format"
      ;;
    help)
      cmd_help
      ;;
    doctor)
      cmd_doctor "$@"
      ;;
    init)
      cmd_init "$@"
      ;;
    work)
      # shellcheck source=lib/work.sh
      source "$ROOT_DIR/lib/work.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        start) work_start "$@" ;;
        stop) work_stop "$@" ;;
        status) work_status "$@" ;;
        *) die "Unknown work command: $subcmd. Try: start, stop, status" 2 ;;
      esac
      ;;
    goal)
      # shellcheck source=lib/goals.sh
      source "$ROOT_DIR/lib/goals.sh"
      subcmd="${1:-show}"
      shift || true
      case "$subcmd" in
        set) goal_set "$@" ;;
        show) goal_show "$@" ;;
        progress) goal_update_progress "$@" ;;
        complete) goal_complete "$@" ;;
        clear) goal_clear "$@" ;;
        *) die "Unknown goal command: $subcmd. Try: set, show, progress, complete, clear" 2 ;;
      esac
      ;;
    ai)
      # shellcheck source=lib/ai.sh
      source "$ROOT_DIR/lib/ai.sh"
      subcmd="${1:-query}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli ai - AI-powered development assistant

Usage:
  harm-cli ai [COMMAND] [OPTIONS]

Commands:
  query          Ask AI a question (default)
  review         Review git changes with AI
  explain-error  Explain last error from logs
  daily          Daily productivity insights
  --setup        Configure API key
  --help         Show this help

Options:
  -c, --context     Include full context (query)
  --no-cache        Skip cache (query)
  -u, --unstaged    Review unstaged changes (review)
  -y, --yesterday   Yesterday's insights (daily)
  -w, --week        Weekly insights (daily)

Examples:
  harm-cli ai "How do I list files recursively?"
  harm-cli ai review
  harm-cli ai review --unstaged
  harm-cli ai explain-error
  harm-cli ai daily
  harm-cli ai daily --week
  harm-cli ai --setup

API Key Setup:
  1. Get key: https://aistudio.google.com/app/apikey
  2. Run: harm-cli ai --setup
  3. Or: export GEMINI_API_KEY="your-key"

Cache:
  - Query responses cached for 1 hour
  - Review/explain/daily always fresh
  - Clear: rm -rf ~/.harm-cli/ai-cache
EOF
          ;;
        --setup)
          ai_setup
          ;;
        review)
          ai_review "$@"
          ;;
        explain-error | explain)
          ai_explain_error "$@"
          ;;
        daily)
          ai_daily "$@"
          ;;
        query)
          shift
          ai_query "$@"
          ;;
        *)
          # Everything else is a query (including --no-cache, --context flags)
          ai_query "$subcmd" "$@"
          ;;
      esac
      ;;
    git)
      # shellcheck source=lib/git.sh
      source "$ROOT_DIR/lib/git.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli git - Enhanced git workflows with AI

Usage:
  harm-cli git [COMMAND]

Commands:
  status         Enhanced git status with suggestions
  commit-msg     Generate AI commit message from staged changes
  --help         Show this help

Examples:
  harm-cli git status
  git add lib/*.sh && harm-cli git commit-msg
  msg=$(harm-cli git commit-msg) && git commit -m "$msg"

Notes:
  - commit-msg requires staged changes
  - commit-msg uses AI (requires API key)
  - status works in any git repository
EOF
          ;;
        commit-msg | commit)
          git_commit_msg "$@"
          ;;
        status | st)
          git_status_enhanced "$@"
          ;;
        *)
          error_msg "Unknown git command: $subcmd"
          echo "Try: harm-cli git --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    proj)
      # shellcheck source=lib/proj.sh
      source "$ROOT_DIR/lib/proj.sh"
      subcmd="${1:-list}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli proj - Project management and switching

Usage:
  harm-cli proj [COMMAND] [ARGS]

Commands:
  list                List all registered projects
  add <path> [name]   Add project to registry
  remove <name>       Remove project from registry
  switch <name>       Output cd command to switch to project
  --help              Show this help

Examples:
  harm-cli proj list
  harm-cli proj add ~/harm-cli
  harm-cli proj add ~/myapp myapp
  harm-cli proj switch myapp
  eval "$(harm-cli proj switch myapp)"  # Actually switch

Notes:
  - Projects stored in: ~/.harm-cli/projects/registry.jsonl
  - Project type auto-detected (nodejs, python, rust, go, shell)
  - Switch outputs cd command (shell limitation)

Shell Function (add to ~/.bashrc):
  proj() { eval "$(harm-cli proj switch "$@")"; }
EOF
          ;;
        list | ls)
          proj_list "$@"
          ;;
        add)
          proj_add "$@"
          ;;
        remove | rm)
          proj_remove "$@"
          ;;
        switch | sw)
          proj_switch "$@"
          ;;
        *)
          error_msg "Unknown proj command: $subcmd"
          echo "Try: harm-cli proj --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    docker)
      # shellcheck source=lib/docker.sh
      source "$ROOT_DIR/lib/docker.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli docker - Docker and Docker Compose management

Usage:
  harm-cli docker [COMMAND] [ARGS]

Commands:
  status         Show service status (default)
  up [services]  Start services (detached)
  down           Stop and remove services
  logs <service> View service logs
  shell <service> Open shell in container
  health         Check Docker environment health
  --help         Show this help

Examples:
  harm-cli docker status
  harm-cli docker up
  harm-cli docker up backend database
  harm-cli docker down
  harm-cli docker logs backend
  harm-cli docker shell backend
  harm-cli docker health

Notes:
  - Auto-detects compose.yaml or docker-compose.yml
  - Requires Docker daemon running
  - Services start in detached mode (-d)
  - Logs follow by default (-f)
EOF
          ;;
        up)
          docker_up "$@"
          ;;
        down)
          docker_down "$@"
          ;;
        status | ps)
          docker_status "$@"
          ;;
        logs)
          docker_logs "$@"
          ;;
        shell | sh)
          docker_shell "$@"
          ;;
        health)
          docker_health "$@"
          ;;
        *)
          error_msg "Unknown docker command: $subcmd"
          echo "Try: harm-cli docker --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    python)
      # shellcheck source=lib/python.sh
      source "$ROOT_DIR/lib/python.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli python - Python development environment

Usage:
  harm-cli python [COMMAND] [ARGS]

Commands:
  status         Show Python environment status (default)
  test           Run test suite (pytest/unittest)
  lint           Run linters (ruff/flake8)
  format         Format code (ruff/black)
  --help         Show this help

Examples:
  harm-cli python status
  harm-cli python test
  harm-cli python test -v
  harm-cli python lint
  harm-cli python format

Notes:
  - Auto-detects Poetry projects (pyproject.toml)
  - Auto-detects Django projects (manage.py)
  - Prefers modern tools (ruff over flake8)
  - Shows venv activation suggestions
EOF
          ;;
        status)
          python_status "$@"
          ;;
        test | t)
          python_test "$@"
          ;;
        lint | l)
          python_lint "$@"
          ;;
        format | fmt)
          python_format "$@"
          ;;
        *)
          error_msg "Unknown python command: $subcmd"
          echo "Try: harm-cli python --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    gcloud)
      # shellcheck source=lib/gcloud.sh
      source "$ROOT_DIR/lib/gcloud.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli gcloud - Google Cloud SDK integration

Usage:
  harm-cli gcloud [COMMAND]

Commands:
  status         Show GCloud SDK status (default)
  --help         Show this help

Examples:
  harm-cli gcloud status

Notes:
  - Shows SDK installation and configuration
  - Provides setup instructions if needed
  - Checks account and project settings
EOF
          ;;
        status)
          gcloud_status "$@"
          ;;
        *)
          error_msg "Unknown gcloud command: $subcmd"
          echo "Try: harm-cli gcloud --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    health)
      # shellcheck source=lib/health.sh
      source "$ROOT_DIR/lib/health.sh"
      health_check "$@"
      ;;
    *)
      die "Unknown command: $cmd. Run 'harm-cli help' for usage." 2
      ;;
  esac
}

# ═══════════════════════════════════════════════════════════════
# Entry Point
# ═══════════════════════════════════════════════════════════════

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
