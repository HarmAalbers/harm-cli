#!/usr/bin/env bash
# shellcheck shell=bash
# harm-cli - Personal CLI toolkit for development
# Version: 0.1.0-alpha
#
# Usage: harm-cli [OPTIONS] COMMAND [ARGS...]

set -Eeuo pipefail
IFS=$'\n\t'

# ═══════════════════════════════════════════════════════════════
# Configuration & Globals
# ═══════════════════════════════════════════════════════════════

# Resolve symlinks to find the real script location
# This ensures VERSION file is found even when called via symlink (e.g., ~/.local/bin/harm-cli)
SCRIPT_PATH="${BASH_SOURCE[0]}"
while [[ -L "$SCRIPT_PATH" ]]; do
  SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" && pwd)"
  SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
  # Handle relative symlinks
  [[ "$SCRIPT_PATH" != /* ]] && SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" && pwd)"
readonly SCRIPT_DIR
ROOT_DIR="$(cd -- "$SCRIPT_DIR/.." && pwd -P)"
readonly ROOT_DIR
VERSION="$(cat "$ROOT_DIR/VERSION" 2>/dev/null || echo "unknown")"
readonly VERSION

# Load common utilities
# shellcheck source=lib/common.sh
if [[ -f "$ROOT_DIR/lib/common.sh" ]]; then
  source "$ROOT_DIR/lib/common.sh"
else
  # Minimal fallback if common.sh doesn't exist yet
  die() {
    echo "ERROR: $*" >&2
    exit "${2:-1}"
  }
  log() { echo "$@" >&2; }
fi

# ═══════════════════════════════════════════════════════════════
# Command Dispatch
# ═══════════════════════════════════════════════════════════════

cmd_version() {
  local format="${1:-${HARM_CLI_FORMAT:-text}}"
  case "$format" in
    json)
      jq -n \
        --arg version "$VERSION" \
        --arg shell "$BASH_VERSION" \
        '{version: $version, shell: "bash", shell_version: $shell}'
      ;;
    *)
      echo "harm-cli version $VERSION"
      echo "Shell: bash $BASH_VERSION"
      ;;
  esac
}

cmd_help() {
  cat <<'EOF'
harm-cli - Personal CLI toolkit for development

Usage:
  harm-cli [OPTIONS] COMMAND [ARGS...]

Options:
  -h, --help              Show this help message
  -v, --version           Show version information
  -F, --format FORMAT     Output format (text|json) [default: text]
  -q, --quiet             Suppress non-error output
  -d, --debug             Enable debug output

Commands:
  version                 Show version information
  help                    Show this help message
  doctor                  Check system dependencies and health
  init                    Initialize harm-cli in current shell

  work                    Work session management
  goal                    Goal tracking and progress
  activity                Activity tracking and command logging
  insights                Productivity insights and analytics
  focus                   Focus monitoring and pomodoro timer
  log                     Real-time log streaming and management
  ai                      AI assistant commands (Gemini)
  learn                   Interactive learning modules
  discover                Discover helpful features
  unused                  Find unused commands
  cheat                   Quick command reference (cheat.sh)
  md                      Markdown rendering and viewing (glow/bat)
  git                     Enhanced git workflows with AI
  proj                    Project management and switching
  docker                  Docker and Docker Compose management
  python                  Python development environment
  gcloud                  Google Cloud SDK integration
  health                  System and project health checks
  safe                    Safety wrappers for dangerous operations

Run 'harm-cli COMMAND --help' for more information on a command.

Environment Variables:
  HARM_CLI_HOME          Override config directory (default: ~/.harm-cli)
  HARM_CLI_LOG_LEVEL     Log level: DEBUG|INFO|WARN|ERROR (default: INFO)
  HARM_CLI_FORMAT        Default output format: text|json (default: text)

Examples:
  harm-cli version --format json
  harm-cli work start "Phase 3"
  harm-cli goal set "Complete refactoring" 4h
  harm-cli ai "How do I list files recursively?"
  harm-cli ai --setup

For more information, visit: https://github.com/HarmAalbers/harm-cli
EOF
}

cmd_doctor() {
  log "🏥 Checking system health..."
  echo ""

  # Check shell
  echo "Shell Environment:"
  echo "  ✅ Bash version: $BASH_VERSION"

  # Check required dependencies
  echo ""
  echo "Required Dependencies:"
  local deps=(bash jq git)
  local missing=0

  for dep in "${deps[@]}"; do
    if command -v "$dep" >/dev/null 2>&1; then
      echo "  ✅ $dep"
    else
      echo "  ❌ $dep (missing)"
      ((missing++))
    fi
  done

  # Check optional dependencies
  echo ""
  echo "Optional Dependencies:"
  local opt_deps=(zsh curl docker python3)

  for dep in "${opt_deps[@]}"; do
    if command -v "$dep" >/dev/null 2>&1; then
      echo "  ✅ $dep"
    else
      echo "  ⚠️  $dep (optional)"
    fi
  done

  echo ""
  if ((missing > 0)); then
    die "$missing required dependencies missing" 1
  else
    echo "✅ All required dependencies installed"
  fi
}

cmd_init() {
  cat <<'EOF'
# harm-cli shell integration

To enable harm-cli in your shell, add this to your ~/.bashrc or ~/.zshrc:

  # Load harm-cli
  eval "$(harm-cli init)"

Or source the initialization script directly:

  # Bash
  source /path/to/harm-cli/etc/harm-cli.bash

  # Zsh
  source /path/to/harm-cli/etc/harm-cli.zsh

This will:
  - Add harm-cli to your PATH
  - Enable command completions
  - Set up helpful aliases
  - Initialize work session tracking
EOF
}

# ═══════════════════════════════════════════════════════════════
# Argument Parsing
# ═══════════════════════════════════════════════════════════════

main() {
  local format="${HARM_CLI_FORMAT:-text}"
  local quiet=0
  local debug=0

  # Parse global options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h | --help)
        cmd_help
        exit 0
        ;;
      -v | --version)
        cmd_version "$format"
        exit 0
        ;;
      -F | --format)
        format="${2:?--format requires an argument}"
        shift 2
        ;;
      -q | --quiet)
        quiet=1
        shift
        ;;
      -d | --debug)
        debug=1
        set -x
        shift
        ;;
      -*)
        die "Unknown option: $1" 2
        ;;
      *)
        break
        ;;
    esac
  done

  # Export format for subcommands
  export HARM_CLI_FORMAT="$format"
  export HARM_CLI_QUIET="$quiet"
  export HARM_CLI_DEBUG="$debug"

  # Adjust log level based on debug mode
  # Debug mode: show all logs (DEBUG level)
  # Normal mode: only show warnings and errors (WARN level, unless HARM_LOG_LEVEL is explicitly set)
  if [[ $debug -eq 1 ]]; then
    export HARM_LOG_LEVEL="DEBUG"
  fi

  # Dispatch to command
  local cmd="${1:-help}"
  shift || true

  case "$cmd" in
    version)
      # Parse format: support both --format FLAG and positional arg
      local cmd_format="$format"
      if [[ "${1:-}" == "--format" || "${1:-}" == "-F" ]]; then
        cmd_format="${2:?--format requires an argument}"
      elif [[ -n "${1:-}" ]]; then
        cmd_format="$1"
      fi
      cmd_version "$cmd_format"
      ;;
    help)
      cmd_help
      ;;
    doctor)
      cmd_doctor "$@"
      ;;
    init)
      cmd_init "$@"
      ;;
    work)
      # shellcheck source=lib/work.sh
      source "$ROOT_DIR/lib/work.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli work - Work session management

Usage:
  harm-cli work [COMMAND]
  harm-cli break [COMMAND]

Work Commands:
  start <description>  Start a new work session (25-min pomodoro)
  stop                 Stop current work session
  status               Show current work session status (default)
  reset                Reset pomodoro counter to 0
  stats [period]       Show work statistics (today/week/month/all)
  violations           Show violation count (strict mode)
  reset-violations     Reset violation counter
  set-mode <mode>      Set enforcement mode (strict|moderate|coaching|off)
  --help               Show this help

Break Commands:
  start [duration]     Start a break session (auto-detects short/long)
  stop                 Stop current break session
  status               Show current break session status

Enforcement Modes:
  strict     Single project/goal enforcement with warnings
  moderate   Track violations but don't warn (default)
  coaching   Gentle reminders only
  off        No enforcement

Examples:
  harm-cli work start "Phase 3 implementation"
  harm-cli work stop
  harm-cli work stats today
  harm-cli work reset
  harm-cli break start
  harm-cli break stop

Notes:
  - Uses Pomodoro Technique: 25-min work, 5-min short breaks, 15-min long breaks
  - Auto-starts breaks after work sessions (configurable)
  - Tracks statistics in ~/.harm-cli/work/sessions_YYYY-MM.jsonl
  - Configure with: harm-cli options set (work_duration, break_short, etc.)
EOF
          ;;
        start) work_start "$@" ;;
        stop) work_stop "$@" ;;
        status) work_status "$@" ;;
        reset) work_reset_pomodoro_count "$@" && echo "✅ Pomodoro counter reset to 0" ;;
        stats)
          shift # Remove 'stats' from args
          local period="${1:-all}"
          case "$period" in
            today) work_stats_today ;;
            week) work_stats_week ;;
            month) work_stats_month ;;
            all | "") work_stats ;;
            *) die "Unknown stats period: $period. Try: today, week, month, all" 2 ;;
          esac
          ;;
        *) die "Unknown work command: $subcmd. Try: start, stop, status, stats, reset" 2 ;;
      esac
      ;;
    break)
      # shellcheck source=lib/work.sh
      source "$ROOT_DIR/lib/work.sh"

      local subcmd="${2:-status}"
      shift 2 2>/dev/null || shift 1

      case "$subcmd" in
        --help | help)
          cat <<EOF
Break Session Management

Usage:
  harm-cli break [COMMAND]

Commands:
  start [duration] [type]  Start a break session (auto-detects short/long)
  stop                     Stop current break session
  status                   Show current break session status (default)
  --help                   Show this help

Examples:
  harm-cli break start          # Auto-detect break type based on pomodoros
  harm-cli break start 300      # Custom 5-minute break
  harm-cli break stop
  harm-cli break status

Notes:
  - Short breaks: 5 minutes (after pomodoros 1-3)
  - Long breaks: 15 minutes (after every 4th pomodoro)
  - Breaks can auto-start after work sessions (configurable)
EOF
          ;;
        start) break_start "$@" ;;
        stop) break_stop "$@" ;;
        status) break_status "$@" ;;
        *) die "Unknown break command: $subcmd. Try: start, stop, status" 2 ;;
        violations) work_get_violations ;;
        reset-violations) work_reset_violations ;;
        set-mode) work_set_enforcement "$@" ;;
        *) die "Unknown work command: $subcmd. Try: start, stop, status, violations, reset-violations, set-mode" 2 ;;
      esac
      ;;
    activity)
      # shellcheck source=lib/activity.sh
      source "$ROOT_DIR/lib/activity.sh"
      subcmd="${1:-query}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli activity - Activity tracking and command logging

Usage:
  harm-cli activity [COMMAND] [ARGS]

Commands:
  query <period>    Query activity log (default)
                    Periods: today, yesterday, week, month, all
  stats <period>    Show activity statistics
  clear             Clear all activity data (use with caution!)
  cleanup           Remove old entries (older than 90 days)
  --help            Show this help

Examples:
  harm-cli activity query today
  harm-cli activity query week | jq -r '.command'
  harm-cli activity stats today
  harm-cli activity stats week

Note: Activity tracking is automatic via shell hooks.
      Logs: ~/.harm-cli/activity/activity.jsonl
EOF
          ;;
        query)
          period="${1:-today}"
          activity_query "$period"
          ;;
        stats)
          period="${1:-today}"
          activity_stats "$period"
          ;;
        clear)
          activity_clear
          ;;
        cleanup)
          activity_cleanup
          ;;
        *)
          die "Unknown activity command: $subcmd. Try: query, stats, clear, cleanup" 2
          ;;
      esac
      ;;
    insights)
      # shellcheck source=lib/insights.sh
      source "$ROOT_DIR/lib/insights.sh"
      subcmd="${1:-show}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli insights - Productivity insights and analytics

Usage:
  harm-cli insights [COMMAND] [ARGS]

Commands:
  show <period> [category]  Show insights dashboard (default)
                            Periods: today, yesterday, week, month, all
                            Categories: all, commands, performance, errors, projects, hours
  daily [date]              Daily summary (default: today)
  export <file>             Export HTML report
  json <period>             Export JSON data
  --help                    Show this help

Examples:
  harm-cli insights show week
  harm-cli insights show today commands
  harm-cli insights daily
  harm-cli insights export report.html
  harm-cli insights json week

Categories:
  all           Complete dashboard (default)
  commands      Command frequency analysis
  performance   Performance metrics
  errors        Error rate and failed commands
  projects      Project activity distribution
  hours         Peak productivity hours

Note: Analyzes data from activity tracking.
      Requires: harm-cli activity to be running
EOF
          ;;
        show)
          insights_show "${1:-week}" "${2:-all}"
          ;;
        daily)
          insights_daily_summary "${1:-today}"
          ;;
        export)
          insights_export_html week "${1:-insights-report.html}"
          ;;
        json)
          insights_export_json "${1:-week}"
          ;;
        *)
          die "Unknown insights command: $subcmd. Try: show, daily, export, json" 2
          ;;
      esac
      ;;
    focus)
      # shellcheck source=lib/focus.sh
      source "$ROOT_DIR/lib/focus.sh"
      subcmd="${1:-check}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli focus - Focus monitoring and pomodoro timer

Usage:
  harm-cli focus [COMMAND] [ARGS]

Commands:
  check                 Show focus summary (default)
  score                 Show current focus score (1-10)
  pomodoro [duration]   Start pomodoro timer (default: 25m)
  pomodoro-stop         Stop pomodoro timer
  pomodoro-status       Show pomodoro status
  --help                Show this help

Examples:
  harm-cli focus check
  harm-cli focus score
  harm-cli focus pomodoro 25
  harm-cli focus pomodoro-status

Configuration:
  HARM_FOCUS_CHECK_INTERVAL=900    # Check every 15 minutes (default)
  HARM_POMODORO_DURATION=25        # 25-minute sessions (default)
  HARM_BREAK_DURATION=5            # 5-minute breaks (default)
  HARM_FOCUS_ENABLED=1             # Enable monitoring (default)

Note: Automatic focus checks run every 15 minutes during work sessions.
      Pomodoro timer sends notification when complete.
EOF
          ;;
        check)
          focus_check
          ;;
        score)
          focus_calculate_score
          ;;
        pomodoro)
          pomodoro_start "${1:-$HARM_POMODORO_DURATION}"
          ;;
        pomodoro-stop)
          pomodoro_stop
          ;;
        pomodoro-status)
          pomodoro_status
          ;;
        *)
          die "Unknown focus command: $subcmd. Try: check, score, pomodoro, pomodoro-stop, pomodoro-status" 2
          ;;
      esac
      ;;
    goal)
      # shellcheck source=lib/goals.sh
      source "$ROOT_DIR/lib/goals.sh"
      subcmd="${1:-show}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli goal - Goal tracking and progress management

Usage:
  harm-cli goal [COMMAND] [ARGS]

Commands:
  set <description> <duration>  Set a new goal for today
  show                          Show all goals for today (default)
  progress <id> <percent>       Update goal progress (0-100)
  complete <id>                 Mark goal as complete (100%)
  clear                         Clear all goals (requires --force)
  --help                        Show this help

Examples:
  harm-cli goal set "Complete refactoring" 4h
  harm-cli goal show
  harm-cli goal progress 1 50
  harm-cli goal complete 1
  harm-cli goal clear --force

Notes:
  - Goals are tracked per day in ~/.harm-cli/goals/
  - Duration format: 30m, 2h, 1h30m
  - Use 'show' to see goal IDs for progress/complete commands
  - Clear requires --force flag for safety
EOF
          ;;
        set) goal_set "$@" ;;
        show) goal_show "$@" ;;
        progress) goal_update_progress "$@" ;;
        complete) goal_complete "$@" ;;
        clear) goal_clear "$@" ;;
        *) die "Unknown goal command: $subcmd. Try: set, show, progress, complete, clear" 2 ;;
      esac
      ;;
    log)
      # shellcheck source=lib/logging.sh
      source "$ROOT_DIR/lib/logging.sh"
      subcmd="${1:-tail}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli log - Real-time log streaming and management

Usage:
  harm-cli log [COMMAND] [OPTIONS]

Commands:
  stream [OPTIONS]        Stream logs in real-time (cross-terminal)
  tail [--lines=N]        View recent log entries (default)
  search PATTERN          Search logs for pattern
  stats                   Show log statistics
  clear --force           Clear all log files
  --help                  Show this help

Stream Options:
  --level=LEVEL           Filter by minimum log level (shows level and above)
                          DEBUG: Shows all logs (DEBUG, INFO, WARN, ERROR)
                          INFO:  Shows INFO, WARN, ERROR
                          WARN:  Shows WARN, ERROR
                          ERROR: Shows ERROR only
  --format=FORMAT         Output format (plain|json|structured|color)
                          plain: Raw log lines
                          json: JSON formatted output
                          structured: Visual indicators (✓ ⚠ ✗ 🔍)
                          color: Colored plain text
  --color=WHEN            Colorize output (auto|always|never)
                          auto: Color if terminal supports it (default)
                          always: Always colorize
                          never: Never colorize

Examples:
  # Stream all logs with auto-color
  harm-cli log stream

  # Stream INFO and above (INFO, WARN, ERROR) with colors
  harm-cli log stream --level=INFO --color=always

  # Stream errors only
  harm-cli log stream --level=ERROR

  # Stream in structured format with visual indicators
  harm-cli log stream --format=structured

  # Stream warnings and errors in JSON format
  harm-cli log stream --level=WARN --format=json

  # Other log commands
  harm-cli log tail --lines=100
  harm-cli log search "api"
  harm-cli log stats
  harm-cli log clear --force

Features:
  - ✅ Cross-terminal streaming (logs from ALL terminals appear)
  - ✅ Rotation-aware following (continues through log rotation)
  - ✅ Multiple output formats (plain, JSON, structured, color)
  - ✅ Real-time with zero buffering
  - ✅ Minimum level filtering (industry standard behavior)
  - ✅ Auto-colorization based on terminal support

Log Files:
  Main log:  ~/.harm-cli/logs/harm-cli.log
  Debug log: ~/.harm-cli/logs/debug.log

Environment Variables:
  HARM_LOG_LEVEL          Log level (DEBUG|INFO|WARN|ERROR)
  HARM_LOG_UNBUFFERED     Enable unbuffered writes (1=on, 0=off)
EOF
          ;;
        stream) log_stream "$@" ;;
        tail)
          # Parse --lines flag
          local lines=50
          while [[ $# -gt 0 ]]; do
            case "$1" in
              --lines=*)
                lines="${1#*=}"
                shift
                ;;
              --lines)
                lines="${2:?--lines requires an argument}"
                shift 2
                ;;
              *) shift ;;
            esac
          done
          log_tail "$lines"
          ;;
        search) log_search "$@" ;;
        stats) log_stats "$@" ;;
        clear) log_clear "$@" ;;
        *) die "Unknown log command: $subcmd. Try: stream, tail, search, stats, clear" 2 ;;
      esac
      ;;
    ai)
      # shellcheck source=lib/ai.sh
      source "$ROOT_DIR/lib/ai.sh"
      subcmd="${1:-query}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli ai - AI-powered development assistant

Usage:
  harm-cli ai [COMMAND] [OPTIONS]

Commands:
  query          Ask AI a question (default)
  review         Review git changes with AI
  explain-error  Explain last error from logs
  daily          Daily productivity insights
  --setup        Configure API key
  --help         Show this help

Options:
  -c, --context     Include full context (query)
  --no-cache        Skip cache (query)
  -u, --unstaged    Review unstaged changes (review)
  -y, --yesterday   Yesterday's insights (daily)
  -w, --week        Weekly insights (daily)

Examples:
  harm-cli ai "How do I list files recursively?"
  harm-cli ai review
  harm-cli ai review --unstaged
  harm-cli ai explain-error
  harm-cli ai daily
  harm-cli ai daily --week
  harm-cli ai --setup

API Key Setup:
  1. Get key: https://aistudio.google.com/app/apikey
  2. Run: harm-cli ai --setup
  3. Or: export GEMINI_API_KEY="your-key"

Cache:
  - Query responses cached for 1 hour
  - Review/explain/daily always fresh
  - Clear: rm -rf ~/.harm-cli/ai-cache
EOF
          ;;
        --setup)
          ai_setup
          ;;
        review)
          ai_review "$@"
          ;;
        explain-error | explain)
          ai_explain_error "$@"
          ;;
        daily)
          ai_daily "$@"
          ;;
        model)
          model_subcmd="${1:-list}"
          shift || true
          case "$model_subcmd" in
            list | ls) ai_list_models "$@" ;;
            info) ai_model_info "$@" ;;
            select | choose)
              if model=$(ai_select_model); then
                echo "Selected: $model"
                echo ""
                read -r -p "Set as default? [y/N]: " response
                if [[ "${response,,}" == "y" ]]; then
                  ai_set_model "$model"
                fi
              fi
              ;;
            set) ai_set_model "$@" ;;
            --help | -h)
              cat <<'EOF'
harm-cli ai model - AI model management

Commands:
  list              List available models
  info [model]      Show model information
  select            Interactively select model
  set <model>       Set default model

Examples:
  harm-cli ai model list
  harm-cli ai model info gemini-1.5-pro
  harm-cli ai model select
  harm-cli ai model set gemini-2.0-flash-exp
EOF
              ;;
            *) echo "Unknown model command: $model_subcmd" ;;
          esac
          ;;
        audit)
          # shellcheck source=lib/ai_audit.sh
          source "$ROOT_DIR/lib/ai_audit.sh"
          audit_subcmd="${1:-list}"
          shift || true
          case "$audit_subcmd" in
            list | ls) ai_audit_list "$@" ;;
            show) ai_audit_show "$@" ;;
            stats) ai_audit_stats "$@" ;;
            export) ai_audit_export "$@" ;;
            clean) ai_audit_clean "$@" ;;
            --help | -h)
              cat <<'EOF'
harm-cli ai audit - AI usage audit trail

Commands:
  list [N]          List recent queries (default: 10)
  show <id>         Show full details of specific query
  stats [period]    Usage statistics (today|week|month|all)
  export [format]   Export data (json|csv)
  clean [days]      Remove old entries (default: 30 days)

Examples:
  harm-cli ai audit list
  harm-cli ai audit list 20
  harm-cli ai audit show abc123def456
  harm-cli ai audit stats today
  harm-cli ai audit export csv > usage.csv
  harm-cli ai audit clean 7

Privacy:
  - Audit logs stored in: ~/.harm-cli/ai-audit/
  - Contains prompts and responses (may include sensitive data)
  - Disable: export HARM_AI_AUDIT_ENABLED=0
  - Auto-cleanup after 30 days (configurable)
EOF
              ;;
            *)
              echo "Unknown audit command: $audit_subcmd"
              echo "Try: harm-cli ai audit --help"
              ;;
          esac
          ;;
        query)
          shift
          ai_query "$@"
          ;;
        *)
          # Everything else is a query (including --no-cache, --context flags)
          ai_query "$subcmd" "$@"
          ;;
      esac
      ;;
    learn)
      # shellcheck source=lib/learn.sh
      source "$ROOT_DIR/lib/learn.sh"
      topic="${1:-}"
      if [[ -z "$topic" || "$topic" == "--help" || "$topic" == "-h" ]]; then
        cat <<'EOF'
harm-cli learn - Interactive learning modules

Usage:
  harm-cli learn <topic>
  harm-cli learn --list

Topics:
  git          Advanced git workflows and commands
  docker       Container management and orchestration
  python       Python development, testing, and tools
  bash         Shell scripting and Bash features
  productivity Time management and focus techniques
  harm-cli     Advanced harm-cli features and workflows

Examples:
  harm-cli learn git
  harm-cli learn docker
  harm-cli learn --list

Note: Uses AI to provide interactive, personalized tutorials.
EOF
      elif [[ "$topic" == "--list" ]]; then
        learn_list
      else
        learn_topic "$topic"
      fi
      ;;
    discover)
      # shellcheck source=lib/learn.sh
      source "$ROOT_DIR/lib/learn.sh"
      if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
        cat <<'EOF'
harm-cli discover - Discover helpful features

Usage:
  harm-cli discover

Description:
  Analyzes your command patterns and suggests harm-cli features
  that would be helpful for your workflow.

  Uses AI to provide personalized recommendations based on
  your actual usage patterns from activity tracking.

Examples:
  harm-cli discover

Note: Requires activity tracking to be enabled.
EOF
      else
        discover_features
      fi
      ;;
    unused)
      # shellcheck source=lib/learn.sh
      source "$ROOT_DIR/lib/learn.sh"
      if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
        cat <<'EOF'
harm-cli unused - Find unused commands

Usage:
  harm-cli unused

Description:
  Shows harm-cli commands you haven't tried yet.

  Analyzes your activity log to identify features you might
  be missing out on. Great for discovering new capabilities!

Examples:
  harm-cli unused

Note: Requires activity tracking to be enabled.
      Shows commands from last 90 days of activity.
EOF
      else
        find_unused_commands
      fi
      ;;
    cheat)
      # shellcheck source=lib/learn.sh
      source "$ROOT_DIR/lib/learn.sh"
      query="${1:-}"
      if [[ -z "$query" || "$query" == "--help" || "$query" == "-h" ]]; then
        cat <<'EOF'
harm-cli cheat - Quick command reference

Usage:
  harm-cli cheat <command>

Description:
  Fetches cheat sheet from cheat.sh for any command.
  Quick reference for syntax, options, and examples.

Examples:
  harm-cli cheat curl
  harm-cli cheat git
  harm-cli cheat docker
  harm-cli cheat tar

Source: https://cheat.sh
EOF
      else
        cheat_lookup "$query"
      fi
      ;;
    git)
      # shellcheck source=lib/git.sh
      source "$ROOT_DIR/lib/git.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli git - Enhanced git workflows with AI

Usage:
  harm-cli git [COMMAND]

Commands:
  status         Enhanced git status with suggestions
  commit-msg     Generate AI commit message from staged changes
  --help         Show this help

Examples:
  harm-cli git status
  git add lib/*.sh && harm-cli git commit-msg
  msg=$(harm-cli git commit-msg) && git commit -m "$msg"

Notes:
  - commit-msg requires staged changes
  - commit-msg uses AI (requires API key)
  - status works in any git repository
EOF
          ;;
        commit-msg | commit)
          git_commit_msg "$@"
          ;;
        status | st)
          git_status_enhanced "$@"
          ;;
        *)
          error_msg "Unknown git command: $subcmd"
          echo "Try: harm-cli git --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    proj)
      # shellcheck source=lib/proj.sh
      source "$ROOT_DIR/lib/proj.sh"
      subcmd="${1:-list}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli proj - Project management and switching

Usage:
  harm-cli proj [COMMAND] [ARGS]

Commands:
  list                List all registered projects
  add <path> [name]   Add project to registry
  remove <name>       Remove project from registry
  switch <name>       Output cd command to switch to project
  --help              Show this help

Examples:
  # List and manage projects
  harm-cli proj list
  harm-cli proj add ~/harm-cli
  harm-cli proj add ~/myapp myapp
  harm-cli proj remove myapp

  # Switch directories (requires shell function)
  proj switch myapp          # ✓ Recommended (after init)
  proj sw myapp              # ✓ Short alias
  eval "$(harm-cli proj switch myapp)"  # ✓ Manual eval

Setup (Run Once):
  # Initialize harm-cli to get the proj() helper function
  eval "$(harm-cli init)"

  # Add to ~/.bashrc or ~/.zshrc to persist across sessions:
  echo 'eval "$(harm-cli init)"' >> ~/.bashrc

Notes:
  - Projects stored in: ~/.harm-cli/projects/registry.jsonl
  - Project type auto-detected (nodejs, python, rust, go, shell)
  - The proj() function automatically evaluates switch commands
  - Use 'harm-cli proj' directly for list/add/remove commands
EOF
          ;;
        list | ls)
          proj_list "$@"
          ;;
        add)
          proj_add "$@"
          ;;
        remove | rm)
          proj_remove "$@"
          ;;
        switch | sw)
          proj_switch "$@"
          ;;
        *)
          error_msg "Unknown proj command: $subcmd"
          echo "Try: harm-cli proj --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    docker)
      # shellcheck source=lib/docker.sh
      source "$ROOT_DIR/lib/docker.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli docker - Docker and Docker Compose management

Usage:
  harm-cli docker [COMMAND] [ARGS]

Commands:
  status         Show service status (default)
  up [services]  Start services (detached)
  down           Stop and remove services
  logs <service> View service logs
  shell <service> Open shell in container
  health         Check Docker environment health
  --help         Show this help

Examples:
  harm-cli docker status
  harm-cli docker up
  harm-cli docker up backend database
  harm-cli docker down
  harm-cli docker logs backend
  harm-cli docker shell backend
  harm-cli docker health

Notes:
  - Auto-detects compose.yaml or docker-compose.yml
  - Requires Docker daemon running
  - Services start in detached mode (-d)
  - Logs follow by default (-f)
EOF
          ;;
        up)
          docker_up "$@"
          ;;
        down)
          docker_down "$@"
          ;;
        status | ps)
          docker_status "$@"
          ;;
        logs)
          docker_logs "$@"
          ;;
        shell | sh)
          docker_shell "$@"
          ;;
        health)
          docker_health "$@"
          ;;
        *)
          error_msg "Unknown docker command: $subcmd"
          echo "Try: harm-cli docker --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    python)
      # shellcheck source=lib/python.sh
      source "$ROOT_DIR/lib/python.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli python - Python development environment

Usage:
  harm-cli python [COMMAND] [ARGS]

Commands:
  status         Show Python environment status (default)
  test           Run test suite (pytest/unittest)
  lint           Run linters (ruff/flake8)
  format         Format code (ruff/black)
  --help         Show this help

Examples:
  harm-cli python status
  harm-cli python test
  harm-cli python test -v
  harm-cli python lint
  harm-cli python format

Notes:
  - Auto-detects Poetry projects (pyproject.toml)
  - Auto-detects Django projects (manage.py)
  - Prefers modern tools (ruff over flake8)
  - Shows venv activation suggestions
EOF
          ;;
        status)
          python_status "$@"
          ;;
        test | t)
          python_test "$@"
          ;;
        lint | l)
          python_lint "$@"
          ;;
        format | fmt)
          python_format "$@"
          ;;
        *)
          error_msg "Unknown python command: $subcmd"
          echo "Try: harm-cli python --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    gcloud)
      # shellcheck source=lib/gcloud.sh
      source "$ROOT_DIR/lib/gcloud.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli gcloud - Google Cloud SDK integration

Usage:
  harm-cli gcloud [COMMAND]

Commands:
  status         Show GCloud SDK status (default)
  --help         Show this help

Examples:
  harm-cli gcloud status

Notes:
  - Shows SDK installation and configuration
  - Provides setup instructions if needed
  - Checks account and project settings
EOF
          ;;
        status)
          gcloud_status "$@"
          ;;
        *)
          error_msg "Unknown gcloud command: $subcmd"
          echo "Try: harm-cli gcloud --help"
          exit "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    github | gh)
      # shellcheck source=lib/github.sh
      source "$ROOT_DIR/lib/github.sh"
      subcmd="${1:-status}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli github - GitHub integration and context

Commands:
  status          Show GitHub repository and branch status
  context         Generate AI-ready context summary
  issues [state]  List issues (open|closed|all)
  prs [state]     List pull requests
  issue <number>  Show issue details
  pr <number>     Show PR details

Examples:
  harm-cli github status
  harm-cli github context
  harm-cli github issues
  harm-cli github prs open
  harm-cli github issue 42
  harm-cli github pr 123

Requirements:
  - GitHub CLI (gh): brew install gh
  - Authentication: gh auth login
EOF
          ;;
        status)
          if github_check_auth; then
            echo "Repository Info:"
            github_get_repo_info | jq -r '" Name: \(.owner.login)/\(.name)\n Description: \(.description // "N/A")\n Default Branch: \(.defaultBranchRef.name)\n URL: \(.url)"'
            echo ""
            echo "Current Branch:"
            github_get_current_branch_info | jq -r '" Branch: \(.branch)\n Tracking: \(.tracking // "none")\n Pull Requests: \(.pull_requests | length) open"'
          fi
          ;;
        context)
          github_create_context_summary
          ;;
        issues)
          github_list_issues "$@" | jq -r '.[] | "#\(.number): \(.title)"'
          ;;
        prs | pr-list)
          github_list_prs "$@" | jq -r '.[] | "#\(.number): \(.title) (\(.state))"'
          ;;
        issue)
          github_get_issue "$@" | jq '.'
          ;;
        pr)
          github_get_pr "$@" | jq '.'
          ;;
        *)
          error_msg "Unknown github command: $subcmd"
          echo "Try: harm-cli github --help"
          ;;
      esac
      ;;
    health)
      # shellcheck source=lib/health.sh
      source "$ROOT_DIR/lib/health.sh"
      health_check "$@"
      ;;
    md)
      # shellcheck source=lib/markdown.sh
      source "$ROOT_DIR/lib/markdown.sh"
      subcmd="${1:-}"
      shift || true
      case "$subcmd" in
        render | view)
          render_markdown "$@"
          ;;
        pipe)
          render_markdown_pipe "$@"
          ;;
        tui | browse)
          markdown_tui "$@"
          ;;
        tools | check)
          suggest_markdown_tools
          ;;
        --help | -h | "")
          cat <<'EOF'
harm-cli md - Markdown rendering and viewing

Usage:
  harm-cli md render FILE [OPTIONS]    Render markdown file
  harm-cli md pipe [OPTIONS]           Render from stdin
  harm-cli md tui [DIRECTORY]          Interactive markdown browser (glow)
  harm-cli md tools                    Check available rendering tools

Options (for render/pipe):
  --width WIDTH       Set output width (default: terminal width, max 120)
  --style STYLE       Set style (auto|dark|light) [glow only]
  --pager             Use pager for output
  --no-color          Disable colors
  --tool TOOL         Force specific tool (glow|bat|rich|cat)

Examples:
  harm-cli md render README.md
  harm-cli md render docs/guide.md --width 100 --pager
  echo "# Hello **World**" | harm-cli md pipe
  harm-cli md tui docs/
  harm-cli md tools

Tool Priority:
  1. glow (recommended) - Beautiful rendering with TUI
  2. bat (fallback) - Syntax-highlighted source view
  3. rich-cli (optional) - Python-based rendering
  4. cat (universal) - Plain text output

Install Tools:
  brew install glow bat           # macOS
  sudo apt install glow bat       # Linux (see docs for glow repo setup)

Note: harm-cli works without these tools, using plain text fallback.
EOF
          ;;
        *)
          die "Unknown md subcommand: $subcmd. Use 'harm-cli md --help'" "$EXIT_INVALID_ARGS"
          ;;
      esac
      ;;
    safe)
      # shellcheck source=lib/safety.sh
      source "$ROOT_DIR/lib/safety.sh"
      subcmd="${1:-help}"
      shift || true
      case "$subcmd" in
        rm)
          safe_rm "$@"
          ;;
        docker-prune)
          safe_docker_prune "$@"
          ;;
        git-reset)
          safe_git_reset "$@"
          ;;
        *)
          echo "harm-cli safe - Safety wrappers for dangerous operations"
          echo ""
          echo "Commands:"
          echo "  rm <files>         Safe file deletion"
          echo "  docker-prune       Safe Docker cleanup"
          echo "  git-reset [ref]    Safe git reset with backup"
          ;;
      esac
      ;;
    options)
      # shellcheck source=lib/options.sh
      source "$ROOT_DIR/lib/options.sh"
      subcmd="${1:-show}"
      shift || true
      case "$subcmd" in
        --help | -h)
          cat <<'EOF'
harm-cli options - Manage global settings and preferences

Usage:
  harm-cli options [COMMAND]

Commands:
  set              Interactive configuration of all options (Option C style)
  show             Display all current options (default)
  info             Alias for 'show'
  get <key>        Get value of a specific option
  reset <key>      Reset option to default value
  --help           Show this help

Examples:
  harm-cli options                    # Show all current settings
  harm-cli options info               # Same as above
  harm-cli options show               # Same as above
  harm-cli options set                # Interactive configuration
  harm-cli options get log_level      # Get specific option
  harm-cli options reset format       # Reset to default

Available Options (17 total):
  Paths: cli_home, log_dir
  Logging: log_level, log_to_file, log_to_console, log_unbuffered,
           log_max_size, log_max_files, debug_mode, quiet_mode
  AI: ai_cache_ttl, ai_timeout, ai_max_tokens, ai_model
  Hooks: hooks_enabled, hooks_debug
  Output: format

Notes:
  - Environment variables take precedence over config file
  - Config stored in: ~/.harm-cli/config.sh
  - Use --format json for machine-readable output
EOF
          ;;
        set)
          options_set_interactive
          ;;
        show | info | "")
          options_show
          ;;
        get)
          key="${1:?options get requires option key}"
          options_get "$key"
          ;;
        reset)
          key="${1:?options reset requires option key}"
          options_reset "$key"
          ;;
        *)
          die "Unknown options command: $subcmd. Try: set, show, get <key>, reset <key>" 2
          ;;
      esac
      ;;
    *)
      die "Unknown command: $cmd. Run 'harm-cli help' for usage." 2
      ;;
  esac
}

# ═══════════════════════════════════════════════════════════════
# Entry Point
# ═══════════════════════════════════════════════════════════════

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi
