name: QA & E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

jobs:
  e2e-tests:
    name: E2E Integration Tests
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install bash shellspec jq

      - name: Verify bash version
        run: |
          BASH_PATH="$(brew --prefix)/bin/bash"
          echo "Bash path: $BASH_PATH"
          "$BASH_PATH" --version

      - name: Run E2E test suite
        shell: bash
        run: |
          set +e  # Don't exit on error, we'll handle it
          BASH_PATH="$(brew --prefix)/bin/bash"

          # Run only E2E tests
          shellspec -s "$BASH_PATH" spec/e2e_spec.sh
          EXIT_CODE=$?
          set -e  # Re-enable exit on error

          echo "E2E tests exit code: $EXIT_CODE"

          # Exit codes:
          # 0   = All tests passed, no warnings
          # 101 = Tests passed, but has warnings (acceptable)
          # Other = Actual failures

          if [[ $EXIT_CODE -eq 0 ]] || [[ $EXIT_CODE -eq 101 ]]; then
            echo "✅ E2E tests passed"
            exit 0
          else
            echo "❌ E2E tests failed with exit code: $EXIT_CODE"
            exit 1
          fi

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            spec/e2e_spec.sh
            *.log
          retention-days: 30

  coverage-validation:
    name: Command Coverage Validation
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install bash jq

      - name: Make QA scripts executable
        run: chmod +x scripts/qa-*.sh

      - name: Run coverage validation
        shell: bash
        run: |
          # Run coverage script
          ./scripts/qa-coverage.sh

          # Check if coverage report was generated
          if ls coverage-report-*.md 1> /dev/null 2>&1; then
            echo "✅ Coverage report generated"
            cat coverage-report-*.md
          else
            echo "⚠️  No coverage report generated"
          fi

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report-*.md
          retention-days: 30

  qa-report:
    name: Generate QA Reports
    runs-on: macos-latest
    needs: [e2e-tests, coverage-validation]
    if: always() # Run even if previous jobs fail
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install bash shellspec jq

      - name: Make QA scripts executable
        run: chmod +x scripts/qa-*.sh

      - name: Run all ShellSpec tests
        shell: bash
        run: |
          set +e
          BASH_PATH="$(brew --prefix)/bin/bash"
          shellspec -s "$BASH_PATH" --format documentation > shellspec-output.txt 2>&1
          EXIT_CODE=$?
          set -e

          echo "ShellSpec exit code: $EXIT_CODE"
          cat shellspec-output.txt

      - name: Generate QA report
        shell: bash
        run: |
          # Create reports directory
          mkdir -p qa-reports

          # Generate report
          ./scripts/qa-report.sh

          # List generated reports
          echo "Generated reports:"
          ls -lh qa-reports/

      - name: Upload QA reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-reports
          path: |
            qa-reports/
            shellspec-output.txt
          retention-days: 90

      - name: Comment PR with test summary (on PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read test output if available
            let testOutput = '';
            try {
              testOutput = fs.readFileSync('shellspec-output.txt', 'utf8');
            } catch (err) {
              testOutput = 'Test output not available';
            }

            // Extract summary (last 20 lines typically contain summary)
            const lines = testOutput.split('\n');
            const summary = lines.slice(-20).join('\n');

            const comment = `## 🧪 QA Test Results

            ### E2E Tests
            ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }}

            ### Coverage Validation
            ${{ needs.coverage-validation.result == 'success' && '✅ Passed' || '❌ Failed' }}

            ### Test Summary
            \`\`\`
            ${summary}
            \`\`\`

            📊 Full reports available in workflow artifacts.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  qa-checklist-validation:
    name: Validate QA Checklist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check QA checklist exists
        run: |
          if [[ ! -f "docs/QA_CHECKLIST.md" ]]; then
            echo "❌ QA_CHECKLIST.md not found"
            exit 1
          fi
          echo "✅ QA_CHECKLIST.md exists"

      - name: Validate checklist structure
        run: |
          # Check for required sections
          if ! grep -q "## 1. Core Commands" docs/QA_CHECKLIST.md; then
            echo "❌ Missing Core Commands section"
            exit 1
          fi

          if ! grep -q "## Summary Statistics" docs/QA_CHECKLIST.md; then
            echo "❌ Missing Summary Statistics section"
            exit 1
          fi

          echo "✅ QA checklist structure is valid"

      - name: Count test cases
        run: |
          # Count checkbox items
          test_count=$(grep -c "^- \[ \]" docs/QA_CHECKLIST.md || echo "0")
          echo "📊 Total test cases in checklist: $test_count"

          if [[ $test_count -lt 50 ]]; then
            echo "⚠️  Warning: Less than 50 test cases (found: $test_count)"
          else
            echo "✅ Adequate test coverage ($test_count test cases)"
          fi

  qa-summary:
    name: QA Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests, coverage-validation, qa-checklist-validation, qa-report]
    if: always()
    steps:
      - name: Print QA summary
        run: |
          echo "╔═══════════════════════════════════════════════════════════════╗"
          echo "║                      QA Workflow Summary                      ║"
          echo "╚═══════════════════════════════════════════════════════════════╝"
          echo ""
          echo "E2E Tests:              ${{ needs.e2e-tests.result }}"
          echo "Coverage Validation:    ${{ needs.coverage-validation.result }}"
          echo "QA Checklist:           ${{ needs.qa-checklist-validation.result }}"
          echo "QA Report:              ${{ needs.qa-report.result }}"
          echo ""

          # Determine overall status
          if [[ "${{ needs.e2e-tests.result }}" == "success" ]] && \
             [[ "${{ needs.coverage-validation.result }}" == "success" ]] && \
             [[ "${{ needs.qa-checklist-validation.result }}" == "success" ]]; then
            echo "✅ Overall QA Status: PASSED"
            exit 0
          else
            echo "❌ Overall QA Status: FAILED"
            exit 1
          fi
