# git-cliff configuration for harm-cli
# Generates conventional commit-based changelogs
#
# Usage:
#   git-cliff --tag v1.2.0 --output CHANGELOG.md
#   git-cliff --unreleased --tag v1.2.0
#   git-cliff --latest

[changelog]
# Template for the changelog header
header = """
# Changelog

All notable changes to harm-cli will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""

# Template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first }}\
          {% if commit.breaking %} [**BREAKING**]{% endif %}\
          {% if commit.github.pr_number %} ([#{{ commit.github.pr_number }}]({{ commit.github.pr_url }})){% endif %}
    {% endfor %}
{% endfor %}\n
"""

# Template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""

# Remove the leading and trailing whitespace from the template
trim = true

[git]
# Parse commits based on conventional commits
conventional_commits = true

# Filter out non-conventional commits
filter_unconventional = false

# Process commits
commit_preprocessors = [
  # Remove issue numbers from commit messages
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "" },
]

# Commit parsers - classify commits into groups
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactoring" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(release\\): bump version", skip = true },
  { message = "^chore", group = "Miscellaneous" },
  { message = "^ci", group = "CI/CD" },
  { message = "^build", group = "Build System" },
  { message = "^revert", group = "Reverts" },
  { body = ".*security", group = "Security" },
]

# Protect breaking changes from being skipped
protect_breaking_commits = false

# Filter out commits
filter_commits = false

# Regex for parsing/skipping tags
tag_pattern = "v[0-9]*"

# Regex for skipping tags
skip_tags = "v0.0.1-beta"

# Sort tags chronologically
date_order = false

# Sort commits inside sections by oldest/newest order
sort_commits = "oldest"

[github]
# GitHub repository owner
owner = "harm-less"

# GitHub repository name
repo = "harm-cli"
